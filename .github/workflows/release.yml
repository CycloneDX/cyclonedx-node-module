# This workflow is used for publishing the Node.js package.
#
# Releases are triggered manually. This can be done by browsing to
# https://github.com/CycloneDX/cyclonedx-node-module/actions?query=workflow%3ARelease
# and selecting "Run workflow". If releasing a patch for a previous version
# make sure the correct branch is selected. It will default to the default
# branch.
#
# You will also need to specify the version level increment for this release.
#
# Supported levels are major, minor and patch. Semantic versioning should be
# followed. i.e. major if the release includes breaking changes, minor for
# non-breaking changes with additional functionality and patch for bug fixes and
# dependency updates.
#
# You will also need to specify a value for the related commit message.

name: Release

on:
  workflow_dispatch:
    inputs:
      newversion:
        description: 'Version level [ major | minor | patch | premajor | preminor | prepatch ]'
        required: true
      commitMessage:
        description: 'Release/commit message (%s will be replaced with the resulting version number)'
        default: '%s'
        required: true

env:
  REPORTS_DIR: CI_reports
  NODE_ACTIVE_LTS: "16"
  DOCKERHUB_REPO: cyclonedx/cyclonedx-node
  ARTIFACT_DOCKER_SBOM: 'docker-image-bom'

jobs:
  bump:
    name: bump and tag release
    concurrency: release-bump
    outputs:
      version:       ${{ steps.bump.outputs.version }}
      version_plain: ${{ steps.bump.outputs.version_plain }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2.4.0
      - name: Configure Git
        # needed for push back of changes
        run: |
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --local user.name "${GITHUB_ACTOR}"
      - name: Setup Node.js ${{ env.NODE_ACTIVE_LTS }}
        # see https://github.com/actions/setup-node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_ACTIVE_LTS }}
      ## ! no npm build at the moment
      - name: bump VERSION
        id: bump
        run: |
          VERSION="$(npm version "$NPMV_NEWVERSION" --message "$NPMV_MESSAGE")"
          echo "::debug::new version = $VERSION"
          VERSION_PLAIN="${VERSION:1}" # remove 'v' prefix
          echo "::debug::plain version = $VERSION_PLAIN"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=version_plain::$VERSION_PLAIN"
        env:
          NPMV_NEWVERSION: ${{ github.event.inputs.newversion }}
          NPMV_MESSAGE: ${{ github.event.inputs.commitMessage }}
      - name: git push back
        run: git push --follow-tags

  publish-NPM:
    needs:
      - "bump"
    name: NPM - publish
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.bump.outputs.version }}
      - name: publish to NPM
        run: |
          npm config set "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN"
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-DockerHub:
    needs:
      - "bump"
    name: DockerHub - build & publish
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DI_VERSION: ${{ needs.bump.outputs.version_plain }}
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.bump.outputs.version }}
      - name: Login to DockerHub
        run: docker login --username "$DOCKERHUB_USERNAME" --password "$DOCKERHUB_TOKEN"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: build Docker image
        run: > 
          docker build 
          -t "$DOCKERHUB_REPO:$DI_VERSION"
          -t "$DOCKERHUB_REPO:latest"
          -f Dockerfile .
      - name: fetch own SBOM
        run: |
          mkdir "$REPORTS_DIR"
          docker run --rm \
            -v "$PWD/$REPORTS_DIR:/src/$REPORTS_DIR" \
            "$DOCKERHUB_REPO:$DI_VERSION" \
              --type 'application' \
              --output "/src/$REPORTS_DIR/docker-image.bom.xml"
          docker run --rm \
            -v "$PWD/$REPORTS_DIR:/src/$REPORTS_DIR" \
            "$DOCKERHUB_REPO:$DI_VERSION" \
              --type 'application' \
              --output "/src/$REPORTS_DIR/docker-image.bom.json"
      - name: Artifact reports
        if: ${{ ! cancelled() }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_DOCKER_SBOM }}
          path: ${{ env.REPORTS_DIR }}
          if-no-files-found: error
      - name: publish Docker image
        run: docker push "$DOCKERHUB_REPO:$DI_VERSION"
      - name: publish latest Docker image
        if: ${{ ! startsWith(github.event.inputs.newversion, 'pre') }}
        run: docker push "$DOCKERHUB_REPO:latest"
      - name: Destroy Docker image
        # run regardless of outcome
        if: ${{ always() }}
        run: > 
          docker rmi -f
          "$DOCKERHUB_REPO:$DI_VERSION"
          "$DOCKERHUB_REPO:latest"

  release-GH:
    needs:
      - "bump"
      - "publish-NPM"
      - "release-DockerHub"
    name: GitHub - release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ASSETS_DIR: release_assets
    steps:
      - name: create assets dir
        run: mkdir "$ASSETS_DIR"
      - name: download docker image sboms
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_DOCKER_SBOM }}
          path: ${{ env.ASSETS_DIR }}/${{ env.ARTIFACT_DOCKER_SBOM }}
      - name: Create Release
        id: release
        # see https://github.com/softprops/action-gh-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.bump.outputs.version }}
          name:     ${{ needs.bump.outputs.version_plain }}
          prerelease: ${{ startsWith(github.event.inputs.newversion, 'pre') }}
          files: |
            ${{ env.ASSETS_DIR }}/${{ env.ARTIFACT_DOCKER_SBOM }}/*.bom.*
