# For details of what checks are run for PRs please refer below
# docs: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Docker CI

on: 
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

env:
  REPORTS_DIR: CI_reports
  NODE_ACTIVE_LTS: "16"

jobs:
  test:
    name: Build and test docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      REPORTS_ARTIFACT: 'docker-image-bom'
      DOCKER_TAG: 'cdx-node-module-testing:${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}'
    steps:
      - name: Checkout
        # see https://github.com/actions/checkout
        uses: actions/checkout@v3
      - name: Login to DockerHub
        run: docker login --username "$DOCKERHUB_USERNAME" --password "$DOCKERHUB_TOKEN"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      ## ! no npm build at the moment
      - name: Build Docker image
        run: docker build -t "$DOCKER_TAG" -f Dockerfile .
      - name: 'Test: build SBOM from the bundled application'
        run: |
          mkdir "$PWD/$REPORTS_DIR"
          docker run --rm \
            --volume "$PWD/$REPORTS_DIR:/src" \
            --workdir /usr/src/cyclonedx-bom \
            "$DOCKER_TAG" \
              --type 'application' \
              --output /src/docker-image.bom.xml
          docker run --rm \
            --volume "$PWD/$REPORTS_DIR:/src" \
            --workdir /usr/src/cyclonedx-bom \
            "$DOCKER_TAG" \
              --type 'application' \
              --output /src/docker-image.bom.json
      - name: Artifact reports
        if: ${{ ! cancelled() }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPORTS_ARTIFACT }}
          path: ${{ env.REPORTS_DIR }}
          if-no-files-found: error
      - name: Destroy Docker image
        # run regardless of outcome
        if: ${{ always() }}
        run: docker rmi -f "$DOCKER_TAG"
